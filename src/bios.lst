ca65 V2.18 - Ubuntu 2.19-1
Main file   : bios.s
Current file: bios.s

000000r 1               ;***********************************************************************
000000r 1               ; SERIAL 16c550 DRIVER
000000r 1               ; AUTHOR: Paulo da Silva (pgordao)
000000r 1               ;
000000r 1               ; Version: 0.0.2
000000r 1               
000000r 1               .setcpu "6502"
000000r 1               
000000r 1               .segment "ZEROPAGE"
000000r 1               RACC     = $30               ;;: .res 1
000000r 1               RPHY     = $31               ;;: .res 1
000000r 1               RPHX     = $32               ;;: .res 1
000000r 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000000r 1               ; These variable is just for test of UART.
000000r 1               MSGL     = $33
000000r 1               MSGH     = $34
000000r 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000000r 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000000r 1               ; These variables is to save registers X and Y in cpu 6502 although it does
000000r 1               ; not have PHX and PHY.
000000r 1               MPHX     = $35
000000r 1               MPHY     = $36
000000r 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000000r 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000000r 1               ; Counter is to be used com DEC in 6502 that does not has a dec for Acc
000000r 1               COUNTER  = $37
000000r 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000000r 1               LAST_CMD = $38
000000r 1               ADDR1L   = $39          ; Digito 4 A do hexa 0xABCD
000000r 1               ADDR1H   = $3A          ; Digito 3 B do hexa 0xABCD
000000r 1               ADDR2L   = $3B          ; Digito 2 C do hexa 0xABCD
000000r 1               ADDR2H   = $3C          ; Digito 1 D do hexa 0xABCD
000000r 1               BSZ      = $3D          ; string size in buffer
000000r 1               ERRO     = $3E          ; CODIGO DO ERRO
000000r 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000000r 1               ;Flag to sign the use of WRITE_BYTE or WRITE_BYTE_LF
000000r 1               MEOR     = $3F
000000r 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000000r 1               TMP      = $40          ;;TEMPORARY REGISTERS
000000r 1               TMP1     = $41
000000r 1               TMP2     = $42
000000r 1               
000000r 1               BIN      = $0200          ; Buffer size = 128 bytes
000000r 1               
000000r 1               ;0 - No errors
000000r 1               ;1 - Erro na conversao hexadecimal
000000r 1               
000000r 1               .segment "DRV"
000000r 1               
000000r 1               ;Uart registers
000000r 1               PORT = $7800            ;;Uart address
000000r 1               R_RX = $00    ;;receiver buffer register (read only)
000000r 1               R_TX = $00    ;;transmitter holding register (write only)
000000r 1               RDLL = $00    ;;divisor latch LSB (if DLAB=1)
000000r 1               RDLH = $01    ;;divisor latch HSB (if DLAB=1)
000000r 1               RIER = $01    ;;interrupt enable register
000000r 1               RIIR = $02    ;;interrupt identification register
000000r 1               RFCR = $02    ;;FIFO control register
000000r 1               RLCR = $03    ;;line control register
000000r 1               RMCR = $04    ;;modem control register
000000r 1               RLSR = $05    ;;line status register
000000r 1               RMSR = $06    ;;modem status register
000000r 1               RSCR = $07	;;scratch register
000000r 1               
000000r 1               ; Constants
000000r 1               .if .not .def(CR)
000000r 1               	CR  = $0D ; Carriage Return
000000r 1               .endif
000000r 1               .if .not .def(LF)
000000r 1               	LF  = $0A ; Line feed
000000r 1               .endif
000000r 1               
000000r 1               DIV_4800_LO   = 24
000000r 1               DIV_4800_HI   = 0
000000r 1               DIV_9600_LO   = 12
000000r 1               DIV_9600_HI   = 0
000000r 1               DIV_19200_LO  = 6
000000r 1               DIV_19200_HI  = 0
000000r 1               DIV_115200_LO = 1
000000r 1               DIV_115200_HI = 0
000000r 1               POLLED_MODE   = %00000000
000000r 1               LCR_8N1       = %00000011
000000r 1               DLAB          = %10000000
000000r 1               FIFO_ENABLE   = %00000111 ;%00000111
000000r 1               THR_EMPTY     = %01100000       ;;
000000r 1               
000000r 1               DATA_READY  = %00000001
000000r 1               OVERRUN_ERR = %00000010
000000r 1               PARITY_ERR  = %00000100
000000r 1               FRAMING_ERR = %00001000
000000r 1               BREAK_INT   = %00010000
000000r 1               MCR_DTR  = $01  ;dtr output
000000r 1               MCR_RTS  = $02  ;rts output
000000r 1               MCR_OUT1 = $04  ;output #1
000000r 1               MCR_OUT2 = $08  ;output #2
000000r 1               MCR_LOOP = $10  ;loop back
000000r 1               MCR_AFCE = $20  ;auto flow control enable
000000r 1               
000000r 1               ;RESET:
000000r 1               ;    JMP     RESET1
000000r 1               
000000r 1               INITUART:
000000r 1  A9 80            LDA        #DLAB               ;set the divisor latch access bit (DLAB)
000002r 1  8D 03 78         STA        PORT+RLCR
000005r 1  A9 0C            LDA        #DIV_9600_LO        ;store divisor low byte (9600 baud @ 1,8 MHz clock)
000007r 1  8D 00 78         STA        PORT+RDLL
00000Ar 1  A9 00            LDA        #DIV_9600_HI        ;store divisor hi byte
00000Cr 1  8D 01 78         STA        PORT+RDLH
00000Fr 1  A9 07            LDA        #FIFO_ENABLE        ;enable the UART FIFO
000011r 1  8D 02 78         STA        PORT+RFCR
000014r 1  A9 00            LDA        #POLLED_MODE	       ;disable all interrupts
000016r 1  8D 01 78         STA        PORT+RIER
000019r 1  A9 03        	LDA        #LCR_8N1            ;set 8 data bits, 1 stop bit, no parity, disable DLAB
00001Br 1  8D 03 78         STA        PORT+RLCR
00001Er 1  A9 2B            LDA        #MCR_OUT2 + MCR_RTS + MCR_DTR + MCR_AFCE
000020r 1  8D 04 78         STA        PORT+RMCR
000023r 1  AD 00 78         LDA        PORT+R_RX           ;Clear RX buffer
000026r 1  60               RTS
000027r 1               
000027r 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000027r 1               ; B_READ_BYTE: Read byte from UART waiting for it (BLOCANT)
000027r 1               ; Registers changed: A
000027r 1               ; Flag CARRY not changed.
000027r 1               ;
000027r 1               B_READ_BYTE:
000027r 1  AD 05 78     	LDA PORT+RLSR 												;// check the line status register:
00002Ar 1  29 1E        	AND #(OVERRUN_ERR | PARITY_ERR | FRAMING_ERR | BREAK_INT)   ; check for errors
00002Cr 1  F0 06        	BEQ @NO_ERR 												    ;// if no error bits, are set, no error
00002Er 1  AD 00 78     	LDA PORT+R_RX
000031r 1  4C rr rr     	JMP B_READ_BYTE
000034r 1               @NO_ERR:
000034r 1  AD 05 78     	LDA PORT+RLSR 												    ;// reload the line status register
000037r 1  29 01        	AND #DATA_READY
000039r 1  F0 EC        	BEQ B_READ_BYTE   											;// if data ready is not set, loop
00003Br 1  AD 00 78     	LDA PORT+R_RX
00003Er 1  60           	RTS
00003Fr 1               
00003Fr 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00003Fr 1               ; B_READ_BYTE_ECHO: Read byte from UART waiting for it (BLOCANT) with echo
00003Fr 1               ; Registers changed: A
00003Fr 1               ; Flag CARRY not changed.
00003Fr 1               ;
00003Fr 1               B_READ_BYTE_ECHO:
00003Fr 1  20 rr rr         JSR B_READ_BYTE
000042r 1               ;ECHO CHAR
000042r 1  20 rr rr         JSR WRITE_BYTE
000045r 1               ;*********
000045r 1  60           	RTS
000046r 1               
000046r 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000046r 1               ; READ_BYTE: Read byte from UART waiting for it (NO BLOCANT)
000046r 1               ; Registers changed: A, Y
000046r 1               ; Flag CARRY: Set when character ready
000046r 1               ;             Clear when no character ready
000046r 1               READ_BYTE:
000046r 1  84 36            STY     MPHY                ; Save Y Reg
000048r 1  AD 05 78     	LDA PORT+RLSR 												;// check the line status register:
00004Br 1  29 1E        	AND #(OVERRUN_ERR | PARITY_ERR | FRAMING_ERR | BREAK_INT)   ; check for errors
00004Dr 1  F0 06        	BEQ @NO_ERR 												    ;// if no error bits, are set, no error
00004Fr 1  AD 00 78     	LDA PORT+R_RX
000052r 1  4C rr rr     	JMP NO_CHAR ;READ_BYTE
000055r 1               @NO_ERR:
000055r 1  AD 05 78     	LDA PORT+RLSR 												    ;// reload the line status register
000058r 1  29 01        	AND #DATA_READY
00005Ar 1  F0 0C        	BEQ NO_CHAR   											;// if data ready is not set, loop
00005Cr 1  AD 00 78     	LDA PORT+R_RX
00005Fr 1  A0 FF            LDY     #$FF
000061r 1               @txdelay:
000061r 1  88               DEY
000062r 1  D0 FD            BNE     @txdelay
000064r 1  A4 36            LDY     MPHY
000066r 1  38           	SEC		    										;// otherwise, we have data! Load it. 				    									;// clear the carry flag to indicate no error
000067r 1  60           	RTS
000068r 1               NO_CHAR:
000068r 1  A0 FF            LDY     #$FF
00006Ar 1               @txdelay1:
00006Ar 1  88               DEY
00006Br 1  D0 FD            BNE     @txdelay1
00006Dr 1  A4 36            LDY     MPHY
00006Fr 1  18               CLC
000070r 1  60               RTS
000071r 1               
000071r 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000071r 1               ; READ_BYTE_ECHO: Read byte from UART waiting for it (NO BLOCANT) with echo
000071r 1               ; Registers changed: A, Y
000071r 1               ; Flag CARRY: Set when character ready
000071r 1               ;             Clear when no character ready
000071r 1               READ_BYTE_ECHO:
000071r 1  20 rr rr         JSR     READ_BYTE
000074r 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000074r 1               ;ECHO CHAR
000074r 1  20 rr rr         JSR     WRITE_BYTE
000077r 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000077r 1  60               RTS
000078r 1               
000078r 1               
000078r 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000078r 1               ; WRITE_BYTE: Write byte to UART
000078r 1               ; Registers changed: NONE
000078r 1               ; Flag CARRY not changed.
000078r 1               ;
000078r 1               WRITE_BYTE:
000078r 1  84 36            STY     MPHY                ; Save Y Reg
00007Ar 1  86 35            STX     MPHX                ; Save X Reg
00007Cr 1  48               PHA                         ; Save A Reg
00007Dr 1               WAIT_FOR_THR_EMPTY:
00007Dr 1  AD 05 78         LDA     PORT+RLSR           ; Get the Line Status Register
000080r 1  29 60            AND     #THR_EMPTY          ; Check for TX empty
000082r 1  F0 F9            BEQ     WAIT_FOR_THR_EMPTY 	; loop while the THR is not empty
000084r 1  68           	PLA
000085r 1  8D 00 78     	STA     PORT+R_TX 			; send the byte
000088r 1  48               PHA
000089r 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000089r 1               ;DELAY BETWEEN CHAR SENT
000089r 1  A0 10            LDY     #$10
00008Br 1               @YDELAY:
00008Br 1  A9 FF            LDA     #$FF
00008Dr 1  85 37            STA     COUNTER
00008Fr 1               @txdelay:
00008Fr 1  C6 37            DEC     COUNTER
000091r 1  D0 FC            BNE     @txdelay
000093r 1  88               DEY
000094r 1  D0 F5            BNE     @YDELAY
000096r 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000096r 1  68               PLA
000097r 1  A6 35            LDX     MPHX                ; Restore X Reg
000099r 1  A4 36            LDY     MPHY                ; Restore Y Reg
00009Br 1  60               RTS
00009Cr 1               
00009Cr 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00009Cr 1               ; WRITE_BYTE_WITH_LF: Write byte to UART, IF BYTE IS 0D WRITE 0A(LF) TOO
00009Cr 1               ; Registers changed: NONE
00009Cr 1               ; Flag CARRY not changed.
00009Cr 1               ;
00009Cr 1               WRITE_BYTE_WITH_LF:
00009Cr 1  48               PHA
00009Dr 1  20 rr rr         JSR     WRITE_BYTE
0000A0r 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0000A0r 1               ;WRITE A LF IF ACC HAS A $0D IN IT
0000A0r 1  68               PLA
0000A1r 1  C9 0D            CMP     #$0D
0000A3r 1  D0 05            BNE     WRITE_BYTE_WITH_ECHO_FIM
0000A5r 1  A9 0A            LDA     #$0A
0000A7r 1  20 rr rr         JSR     WRITE_BYTE
0000AAr 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0000AAr 1               WRITE_BYTE_WITH_ECHO_FIM:
0000AAr 1  60               RTS
0000ABr 1               
0000ABr 1               .segment "BIOS"
000000r 1               
000000r 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000000r 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000000r 1               ;                        RESET
000000r 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000000r 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000000r 1               RESET:
000000r 1  78           	            SEI					; No interrupt
000001r 1  D8           	            CLD					; Set decimal
000002r 1  A2 FE        	            LDX #$FE 			; Set stack pointer
000004r 1  9A           	            TXS
000005r 1               
000005r 1                               ;;Initializing some variables
000005r 1  A9 00                        LDA     #$00
000007r 1  85 39                        STA     ADDR1L
000009r 1  85 3A                        STA     ADDR1H
00000Br 1  85 3B                        STA     ADDR2L
00000Dr 1  85 3C                        STA     ADDR2H
00000Fr 1               
00000Fr 1  20 rr rr                     JSR     INITUART
000012r 1  A9 rr                        LDA     #<MSG1
000014r 1  85 33                        STA     MSGL
000016r 1  A9 rr                        LDA     #>MSG1
000018r 1  85 34                        STA     MSGH
00001Ar 1  20 rr rr                     JSR     SHWMSG
00001Dr 1               NEXT_CHAR:
00001Dr 1  A9 0D                        LDA     #$0D
00001Fr 1  20 rr rr                     JSR     WRITE_BYTE
000022r 1  A9 3E                        LDA     #'>'
000024r 1  20 rr rr                     JSR     WRITE_BYTE
000027r 1               
000027r 1  20 rr rr                     JSR     B_READ_BYTE
00002Ar 1  20 rr rr                     JSR     WRITE_BYTE
00002Dr 1               
00002Dr 1                               ;CMP     #'S'            ;Show memory address data format: ADDR
00002Dr 1                               ;BEQ     TEMP_S
00002Dr 1  C9 44                        CMP     #'D'            ;Dump de memoria format: ADDR:ADDR
00002Fr 1  F0 12                        BEQ     TEMP_D
000031r 1  C9 4D                        CMP     #'M'            ;Put byte into memory address
000033r 1  F0 11                        BEQ     TEMP_M
000035r 1  C9 52                        CMP     #'R'            ;Run programa na format: ADDR R
000037r 1  F0 10                        BEQ     TEMP_R
000039r 1  C9 48                        CMP     #'H'            ;Show help
00003Br 1  F0 0F                        BEQ     TEMP_H
00003Dr 1  4C rr rr                     JMP     NEXT_CHAR
000040r 1               
000040r 1  4C rr rr     TEMP_S:         JMP     DIGITOU_S
000043r 1  4C rr rr     TEMP_D:         JMP     DIGITOU_D
000046r 1  4C rr rr     TEMP_M:         JMP     DIGITOU_M
000049r 1  4C rr rr     TEMP_R:         JMP     DIGITOU_R
00004Cr 1  4C rr rr     TEMP_H:         JMP     DIGITOU_H
00004Fr 1               
00004Fr 1               DIGITOU_S:
00004Fr 1  85 38                        STA     LAST_CMD
000051r 1  A9 rr                        LDA     #<MSG2
000053r 1  85 33                        STA     MSGL
000055r 1  A9 rr                        LDA     #>MSG2
000057r 1  85 34                        STA     MSGH
000059r 1  20 rr rr                     JSR     SHWMSG
00005Cr 1  20 rr rr                     JSR     GETLINE
00005Fr 1  A9 00                        LDA     #<BIN
000061r 1  85 33                        STA     MSGL
000063r 1  A9 02                        LDA     #>BIN
000065r 1  85 34                        STA     MSGH
000067r 1  20 rr rr                     JSR     SHWMSG
00006Ar 1  60                           RTS
00006Br 1  4C rr rr                     JMP     NEXT_CHAR
00006Er 1               DIGITOU_D:
00006Er 1  85 38                        STA     LAST_CMD
000070r 1  A9 rr                        LDA     #<MSG3
000072r 1  85 33                        STA     MSGL
000074r 1  A9 rr                        LDA     #>MSG3
000076r 1  85 34                        STA     MSGH
000078r 1  20 rr rr                     JSR     SHWMSG
00007Br 1  20 rr rr                     JSR     GETLINE
00007Er 1                               ;Get addr from
00007Er 1  A0 00                        LDY     #$00
000080r 1  20 rr rr                     JSR     CONV_ADDR_TO_HEX
000083r 1  A6 41                        LDX     TMP1
000085r 1  A4 42                        LDY     TMP2
000087r 1  20 rr rr                     JSR     SWAP_XY
00008Ar 1  86 39                        STX     ADDR1L
00008Cr 1  84 3A                        STY     ADDR1H
00008Er 1               
00008Er 1  A0 04                        LDY     #$04
000090r 1  B9 00 02                     LDA     BIN,Y
000093r 1  C9 3E                        CMP     #$3E
000095r 1  D0 49                        BNE     DIGITOU_D_SHOWMEM
000097r 1               
000097r 1                               ;Get addr to
000097r 1  A0 05                        LDY     #$05
000099r 1  20 rr rr                     JSR     CONV_ADDR_TO_HEX
00009Cr 1  A6 41                        LDX     TMP1
00009Er 1  A4 42                        LDY     TMP2
0000A0r 1  20 rr rr                     JSR     SWAP_XY
0000A3r 1  86 3B                        STX     ADDR2L
0000A5r 1  84 3C                        STY     ADDR2H
0000A7r 1                               ;JSR     PRINT_ADDR_HEXA
0000A7r 1  A9 08                        LDA     #$08
0000A9r 1  85 42                        STA     TMP2
0000ABr 1  A2 08        LINHA:          LDX     #$08
0000ADr 1  A9 0D                        LDA     #$0D
0000AFr 1  20 rr rr                     JSR     WRITE_BYTE
0000B2r 1  A5 3A                        LDA     ADDR1H
0000B4r 1  20 rr rr                     JSR     PRBYTE
0000B7r 1  A5 39                        LDA     ADDR1L
0000B9r 1  20 rr rr                     JSR     PRBYTE
0000BCr 1  A9 20                        LDA     #' '
0000BEr 1  20 rr rr                     JSR     WRITE_BYTE
0000C1r 1               DIGITOU_D_WORK:
0000C1r 1                               ;addressing mode of 65C02
0000C1r 1                               ;LDA     (ADDR1L)
0000C1r 1                               ;addressing mode of 6502
0000C1r 1  A0 00                        LDY     #$0
0000C3r 1  B1 39                        LDA     (ADDR1L),Y
0000C5r 1                               ;******************
0000C5r 1  20 rr rr                     JSR     PRBYTE
0000C8r 1  A9 20                        LDA     #' '
0000CAr 1  20 rr rr                     JSR     WRITE_BYTE
0000CDr 1  20 rr rr                     JSR     INC_ADDR
0000D0r 1  20 rr rr                     JSR     COMP_ADDR
0000D3r 1  F0 EC                        BEQ     DIGITOU_D_WORK
0000D5r 1  B0 06                        BCS     DIGITOU_D_FIM
0000D7r 1                               ;JSR     PRINT_ADDR_HEXA
0000D7r 1                               ;JSR     READ_BYTE
0000D7r 1  CA                           DEX
0000D8r 1  F0 D1                        BEQ     LINHA
0000DAr 1  4C rr rr                     JMP     DIGITOU_D_WORK
0000DDr 1               DIGITOU_D_FIM:
0000DDr 1  4C rr rr                     JMP     NEXT_CHAR
0000E0r 1               DIGITOU_D_SHOWMEM:
0000E0r 1  A0 04                        LDY     #$04
0000E2r 1  B9 00 02                     LDA     BIN,Y
0000E5r 1  C9 3A                        CMP     #$3A
0000E7r 1  F0 16                        BEQ     DIGITOU_D_SHOWMEM_FIM
0000E9r 1  A5 3A                        LDA     ADDR1H
0000EBr 1  20 rr rr                     JSR     PRBYTE
0000EEr 1  A5 39                        LDA     ADDR1L
0000F0r 1  20 rr rr                     JSR     PRBYTE
0000F3r 1  A9 20                        LDA     #' '
0000F5r 1  20 rr rr                     JSR     WRITE_BYTE
0000F8r 1                               ;addressing mode of 65C02
0000F8r 1                               ;LDA     (ADDR1L)
0000F8r 1                               ;addressing mode of 6502
0000F8r 1  A0 00                        LDY     #$0
0000FAr 1  B1 39                        LDA     (ADDR1L),Y
0000FCr 1               
0000FCr 1  20 rr rr                     JSR     PRBYTE
0000FFr 1               DIGITOU_D_SHOWMEM_FIM:
0000FFr 1  4C rr rr                     JMP     NEXT_CHAR
000102r 1               
000102r 1               DIGITOU_M:
000102r 1  85 38                        STA     LAST_CMD
000104r 1  A9 rr                        LDA     #<MSG7
000106r 1  85 33                        STA     MSGL
000108r 1  A9 rr                        LDA     #>MSG7
00010Ar 1  85 34                        STA     MSGH
00010Cr 1  20 rr rr                     JSR     SHWMSG
00010Fr 1  20 rr rr                     JSR     GETLINE
000112r 1                               ;Get addr from
000112r 1  A0 00                        LDY     #$00
000114r 1  20 rr rr                     JSR     CONV_ADDR_TO_HEX
000117r 1  A6 41                        LDX     TMP1
000119r 1  A4 42                        LDY     TMP2
00011Br 1  20 rr rr                     JSR     SWAP_XY
00011Er 1  86 39                        STX     ADDR1L
000120r 1  84 3A                        STY     ADDR1H
000122r 1               
000122r 1                               ;VERIFICAR SE O COMANDO É :
000122r 1  A0 04                        LDY     #$04
000124r 1  B9 00 02                     LDA     BIN,Y
000127r 1  C9 3A                        CMP     #$3A
000129r 1  D0 19                        BNE     DIGITOU_M_FIM
00012Br 1               
00012Br 1  A0 05                        LDY     #$05
00012Dr 1  B9 00 02                     LDA     BIN,Y
000130r 1  20 rr rr                     JSR     ROL_LEFT
000133r 1  85 41                        STA     TMP1
000135r 1  C8                           INY
000136r 1  B9 00 02                     LDA     BIN,Y
000139r 1  20 rr rr                     JSR     NO_ROL_RIGHT
00013Cr 1  05 41                        ORA     TMP1
00013Er 1  85 41                        STA     TMP1
000140r 1                               ;addressing mode of 65C02
000140r 1                               ;STA     (ADDR1L)
000140r 1                               ;addressing mode of 6502
000140r 1  A0 00                        LDY     #$0
000142r 1  91 39                        STA     (ADDR1L),Y
000144r 1               
000144r 1                               ;LDA     ADDR1H
000144r 1                               ;JSR     PRBYTE
000144r 1                               ;LDA     ADDR1L
000144r 1                               ;JSR     PRBYTE
000144r 1                               ;LDA     #':'
000144r 1                               ;JSR     WRITE_BYTE
000144r 1                               ;LDA     TMP1
000144r 1                               ;JSR     PRBYTE
000144r 1               DIGITOU_M_FIM:
000144r 1  4C rr rr                     JMP     NEXT_CHAR
000147r 1               
000147r 1               DIGITOU_H:
000147r 1  85 38                        STA     LAST_CMD
000149r 1  A9 rr                        LDA     #<HELP
00014Br 1  85 33                        STA     MSGL
00014Dr 1  A9 rr                        LDA     #>HELP
00014Fr 1  85 34                        STA     MSGH
000151r 1  20 rr rr                     JSR     SHWMSG
000154r 1  4C rr rr                     JMP     NEXT_CHAR
000157r 1               
000157r 1               DIGITOU_R:
000157r 1  85 38                        STA     LAST_CMD
000159r 1  A9 rr                        LDA     #<MSG4
00015Br 1  85 33                        STA     MSGL
00015Dr 1  A9 rr                        LDA     #>MSG4
00015Fr 1  85 34                        STA     MSGH
000161r 1  20 rr rr                     JSR     SHWMSG
000164r 1  20 rr rr                     JSR     GETLINE
000167r 1               
000167r 1                               ;;DEBUG
000167r 1  20 rr rr                     JSR     PRINT_BUFFER
00016Ar 1               
00016Ar 1               
00016Ar 1  A0 00                        LDY     #$00
00016Cr 1  20 rr rr                     JSR     CONV_ADDR_TO_HEX
00016Fr 1  A6 41                        LDX     TMP1
000171r 1  A4 42                        LDY     TMP2
000173r 1  20 rr rr                     JSR     SWAP_XY
000176r 1  86 39                        STX     ADDR1L
000178r 1  84 3A                        STY     ADDR1H
00017Ar 1                               ;;DEBUG
00017Ar 1  20 rr rr                     JSR     PRINT_BUFFER_HEXA
00017Dr 1  6C 39 00                     JMP     (ADDR1L)
000180r 1  4C rr rr                     JMP     NEXT_CHAR
000183r 1               SWAP_XY:
000183r 1  84 40                        STY     TMP     ; Y 2 M
000185r 1  8A                           TXA             ; X 2 A
000186r 1  A8                           TAY             ; A 2 Y
000187r 1  A6 40                        LDX     TMP     ; M 2 X
000189r 1  60                           RTS
00018Ar 1               ROL_LEFT:
00018Ar 1  20 rr rr                     JSR     CONV_HEX_1DIG
00018Dr 1  90 0F                        BCC     CONV_HEX_4DIG_FIM
00018Fr 1  2A                           ROL
000190r 1  2A                           ROL
000191r 1  2A                           ROL
000192r 1  2A                           ROL
000193r 1  29 F0                        AND     #$F0
000195r 1  60                           RTS
000196r 1               NO_ROL_RIGHT:
000196r 1  20 rr rr                     JSR     CONV_HEX_1DIG
000199r 1  90 03                        BCC     CONV_HEX_4DIG_FIM
00019Br 1  29 0F                        AND     #$0F
00019Dr 1  60                           RTS
00019Er 1               CONV_HEX_4DIG_FIM:
00019Er 1  A9 rr                        LDA     #<MSG6
0001A0r 1  85 33                        STA     MSGL
0001A2r 1  A9 rr                        LDA     #>MSG6
0001A4r 1  85 34                        STA     MSGH
0001A6r 1  20 rr rr                     JSR     SHWMSG
0001A9r 1  A9 01                        LDA     #$01
0001ABr 1  85 3E                        STA     ERRO
0001ADr 1  18                           CLC
0001AEr 1  60                           RTS
0001AFr 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0001AFr 1               ;CONV_ADDR_TO_HEX:
0001AFr 1               ;
0001AFr 1               CONV_ADDR_TO_HEX:
0001AFr 1                               ;;Dig 4
0001AFr 1  A9 34                        LDA     #'4'
0001B1r 1  20 rr rr                     JSR     WRITE_BYTE
0001B4r 1  B9 00 02                     LDA     BIN,Y
0001B7r 1  20 rr rr                     JSR     WRITE_BYTE
0001BAr 1  B9 00 02                     LDA     BIN,Y
0001BDr 1  20 rr rr                     JSR     ROL_LEFT
0001C0r 1  85 41                        STA     TMP1
0001C2r 1                               ;;Dig 3
0001C2r 1  A9 33                        LDA     #'3'
0001C4r 1  20 rr rr                     JSR     WRITE_BYTE
0001C7r 1  C8                           INY
0001C8r 1  B9 00 02                     LDA     BIN,Y
0001CBr 1  20 rr rr                     JSR     WRITE_BYTE
0001CEr 1  B9 00 02                     LDA     BIN,Y
0001D1r 1  20 rr rr                     JSR     NO_ROL_RIGHT
0001D4r 1  05 41                        ORA     TMP1
0001D6r 1  85 41                        STA     TMP1
0001D8r 1                               ;;Dig 2
0001D8r 1  A9 32                        LDA     #'2'
0001DAr 1  20 rr rr                     JSR     WRITE_BYTE
0001DDr 1  C8                           INY
0001DEr 1  B9 00 02                     LDA     BIN,Y
0001E1r 1  20 rr rr                     JSR     WRITE_BYTE
0001E4r 1  B9 00 02                     LDA     BIN,Y
0001E7r 1  20 rr rr                     JSR     ROL_LEFT
0001EAr 1  85 40                        STA     TMP
0001ECr 1                               ;;Dig 1
0001ECr 1  A9 31                        LDA     #'1'
0001EEr 1  20 rr rr                     JSR     WRITE_BYTE
0001F1r 1  C8                           INY
0001F2r 1  B9 00 02                     LDA     BIN,Y
0001F5r 1  20 rr rr                     JSR     WRITE_BYTE
0001F8r 1  B9 00 02                     LDA     BIN,Y
0001FBr 1  20 rr rr                     JSR     NO_ROL_RIGHT
0001FEr 1  05 40                        ORA     TMP
000200r 1  85 42                        STA     TMP2
000202r 1               
000202r 1  38                           SEC
000203r 1  60                           RTS
000204r 1               
000204r 1               ;*******************************************
000204r 1               ;CONV_HEX_1DIG:
000204r 1               ;Parameter: A digit to be converted
000204r 1               ;Return...: A digit converted
000204r 1               CONV_HEX_1DIG:
000204r 1                               ;;DEBUG
000204r 1  20 rr rr                     JSR     WRITE_BYTE
000207r 1  C9 30                        CMP     #$30
000209r 1  90 18                        BCC     CONV_HEX_1DIG_FIM
00020Br 1  C9 3A                        CMP     #$3A
00020Dr 1  90 0F                        BCC     DIG_0_A_9
00020Fr 1  C9 41                        CMP     #$41
000211r 1  B0 02                        BCS     DIG_A_TO_Z
000213r 1                               ;CARACTER PODE SER UM DESSES : ; < = > ? @
000213r 1  18                           CLC     ;CLEAR CARRY FLAG DIG NOT CONVERTED
000214r 1  60                           RTS
000215r 1               DIG_A_TO_Z:
000215r 1  C9 47                        CMP     #$47
000217r 1  B0 0A                        BCS     CONV_HEX_1DIG_FIM
000219r 1  18                           CLC
00021Ar 1  E9 36                        SBC     #$36
00021Cr 1  38                           SEC     ;SET CARRY FLAG DIG CONVERTED
00021Dr 1  60                           RTS
00021Er 1               DIG_0_A_9:
00021Er 1  18                           CLC
00021Fr 1  E9 2F                        SBC     #$2F
000221r 1  38                           SEC     ;SET CARRY FLAG DIG CONVERTED
000222r 1  60                           RTS
000223r 1               CONV_HEX_1DIG_FIM:
000223r 1  18                           CLC
000224r 1  60                           RTS
000225r 1               ;********************************************
000225r 1               ;Print 4 digits hexadecimal
000225r 1               PRINT_BUFFER_HEXA:
000225r 1  A9 5B                        LDA     #'['
000227r 1  20 rr rr                     JSR     WRITE_BYTE
00022Ar 1  A5 39                        LDA     ADDR1L
00022Cr 1  20 rr rr                     JSR     PRBYTE
00022Fr 1  A5 3A                        LDA     ADDR1H
000231r 1  20 rr rr                     JSR     PRBYTE
000234r 1  A5 38                        LDA     LAST_CMD
000236r 1  C9 44                        CMP     #'D'
000238r 1  D0 0F                        BNE     PRINT_ADDR_HEXA_FIM
00023Ar 1  A9 2E                        LDA     #'.'
00023Cr 1  20 rr rr                     JSR     WRITE_BYTE
00023Fr 1  A5 3B                        LDA     ADDR2L
000241r 1  20 rr rr                     JSR     PRBYTE
000244r 1  A5 3C                        LDA     ADDR2H
000246r 1  20 rr rr                     JSR     PRBYTE
000249r 1               PRINT_ADDR_HEXA_FIM:
000249r 1  A9 5D                        LDA     #']'
00024Br 1  20 rr rr                     JSR     WRITE_BYTE
00024Er 1  60                           RTS
00024Fr 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00024Fr 1  A2 00        GETLINE:        LDX     #$00
000251r 1  20 rr rr     GETLINE1:       JSR     READ_BYTE
000254r 1  20 rr rr                     JSR     WRITE_BYTE
000257r 1  9D 00 02                     STA     BIN,X
00025Ar 1  E8                           INX
00025Br 1  C9 0D                        CMP     #$0D
00025Dr 1  D0 F2                        BNE     GETLINE1
00025Fr 1  A9 00                        LDA     #$00
000261r 1  9D 00 02                     STA     BIN,X
000264r 1  86 3D                        STX     BSZ
000266r 1               
000266r 1  60                           RTS
000267r 1               ;*************************************************
000267r 1               ;Print buffer
000267r 1               PRINT_BUFFER:
000267r 1  A9 00                        LDA     #<BIN
000269r 1  85 33                        STA     MSGL
00026Br 1  A9 02                        LDA     #>BIN
00026Dr 1  85 34                        STA     MSGH
00026Fr 1  20 rr rr                     JSR     PRBYTE
000272r 1  A9 0D                        LDA     #$0D
000274r 1  20 rr rr                     JSR     WRITE_BYTE_WITH_LF
000277r 1  60                           RTS
000278r 1               ;*************************************************
000278r 1  A0 00        SHWMSG:         LDY #$0
00027Ar 1  B1 33        SMSG:           LDA (MSGL),Y
00027Cr 1  F0 0E                        BEQ SMDONE
00027Er 1  20 rr rr                     JSR WRITE_BYTE_WITH_LF
000281r 1  A9 FF                        LDA #$FF
000283r 1  85 37                        STA COUNTER
000285r 1               @txdelay:
000285r 1  C6 37                        DEC COUNTER
000287r 1  D0 FC                        BNE @txdelay
000289r 1  C8                           INY
00028Ar 1  D0 EE                        BNE SMSG
00028Cr 1  60           SMDONE:         RTS
00028Dr 1               
00028Dr 1  48           PRBYTE:     PHA             ;Save A for LSD.
00028Er 1  4A                       LSR
00028Fr 1  4A                       LSR
000290r 1  4A                       LSR             ;MSD to LSD position.
000291r 1  4A                       LSR
000292r 1  20 rr rr                 JSR PRHEX       ;Output hex digit.
000295r 1  68                       PLA             ;Restore A.
000296r 1  29 0F        PRHEX:      AND #$0F        ;Mask LSD for hex print.
000298r 1  09 B0                    ORA #$B0        ;Add "0".
00029Ar 1  C9 BA                    CMP #$BA        ;Digit?
00029Cr 1  90 02                    BCC ECHO        ;Yes, output it.
00029Er 1  69 06                    ADC #$06        ;Add offset for letter.
0002A0r 1  48           ECHO:       PHA             ;*Save A
0002A1r 1  29 7F                    AND #$7F        ;*Change to "standard ASCII"
0002A3r 1  20 rr rr                 JSR  WRITE_BYTE
0002A6r 1  68                       PLA             ;*Restore A
0002A7r 1  60                       RTS             ;*Done, over and out...
0002A8r 1               
0002A8r 1               ;Incrementa endereco
0002A8r 1               INC_ADDR:
0002A8r 1  18                       CLC
0002A9r 1  A9 01                    LDA #$01
0002ABr 1  65 39                    ADC ADDR1L
0002ADr 1  85 39                    STA ADDR1L
0002AFr 1  A9 00                    LDA #$00
0002B1r 1  65 3A                    ADC ADDR1H
0002B3r 1  85 3A                    STA ADDR1H
0002B5r 1  60                       RTS
0002B6r 1               ;Compara enderecos
0002B6r 1               COMP_ADDR:
0002B6r 1  A5 3A                    LDA ADDR1H
0002B8r 1  C5 3C                    CMP ADDR2H
0002BAr 1  D0 04                    BNE COMP_ADDR_FIM
0002BCr 1  A5 39                    LDA ADDR1L
0002BEr 1  C5 3B                    CMP ADDR2L
0002C0r 1               COMP_ADDR_FIM:
0002C0r 1  60                       RTS
0002C1r 1               
0002C1r 1               
0002C1r 1  0D 0A 50 44  MSG1:            .byte CR,LF,"PDSILVA - BIOSMON 2024 - 0.1",CR,0
0002C5r 1  53 49 4C 56  
0002C9r 1  41 20 2D 20  
0002E1r 1  0D 49 6E 70  MSG2:            .byte CR,"Input Addr: ",CR,0
0002E5r 1  75 74 20 41  
0002E9r 1  64 64 72 3A  
0002F0r 1  0D 44 75 6D  MSG3:            .byte CR,"Dump Mem. Addr: Fmt XXXX>XXXX or XXXX:",CR,0
0002F4r 1  70 20 4D 65  
0002F8r 1  6D 2E 20 41  
000319r 1  0D 52 75 6E  MSG4:            .byte CR,"Run program in Addr: Format abcd",CR,0
00031Dr 1  20 70 72 6F  
000321r 1  67 72 61 6D  
00033Cr 1  0D 45 58 45  MSG5:            .byte CR,"EXECUTADO",CR,0
000340r 1  43 55 54 41  
000344r 1  44 4F 0D 00  
000348r 1  0D 48 65 78  MSG6:            .byte CR,"Hex conv. error",CR,0
00034Cr 1  20 63 6F 6E  
000350r 1  76 2E 20 65  
00035Ar 1  0D 50 6F 6B  MSG7:            .byte CR,"Poke: Fmt addr:dt",CR,0
00035Er 1  65 3A 20 46  
000362r 1  6D 74 20 61  
00036Er 1  0D 48 65 6C  HELP:            .byte CR,"Help BIOSMON v 0.1",CR,LF
000372r 1  70 20 42 49  
000376r 1  4F 53 4D 4F  
000383r 1  43 6F 6D 6D                   .byte "Commands:",CR
000387r 1  61 6E 64 73  
00038Br 1  3A 0D        
00038Dr 1  20 20 20 20                   .byte "         S - Put data into buffer",CR
000391r 1  20 20 20 20  
000395r 1  20 53 20 2D  
0003AFr 1  20 20 20 20                   .byte "         D - Dump memory",CR
0003B3r 1  20 20 20 20  
0003B7r 1  20 44 20 2D  
0003C8r 1  20 20 20 20                   .byte "         M - Poke",CR
0003CCr 1  20 20 20 20  
0003D0r 1  20 4D 20 2D  
0003DAr 1  20 20 20 20                   .byte "         R - Run program",CR
0003DEr 1  20 20 20 20  
0003E2r 1  20 52 20 2D  
0003F3r 1  20 20 20 20                   .byte "         H - Show help",CR,LF,0
0003F7r 1  20 20 20 20  
0003FBr 1  20 48 20 2D  
00040Cr 1               
00040Cr 1               ;Used just for test of run cmd.
00040Cr 1               
00040Cr 1               OLD_WOZ:
00040Cr 1  A9 rr                        LDA     #<MSG5
00040Er 1  85 33                        STA     MSGL
000410r 1  A9 rr                        LDA     #>MSG5
000412r 1  85 34                        STA     MSGH
000414r 1  20 rr rr                     JSR     SHWMSG
000417r 1  4C rr rr                     JMP     NEXT_CHAR
00041Ar 1               
00041Ar 1               .segment "RESETVEC"
000000r 1               
000000r 1  rr rr                        .word   RESET          ; NMI vector
000002r 1  rr rr                        .word   RESET          ; RESET vector
000004r 1  00 00                        .word   $0000          ; IRQ vector
000004r 1               
